{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/FeedbackOptions/FeedbackOptions.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","type","name","App","state","props","initialValue","e","target","innerText","toLowerCase","setState","prevState","console","log","countTotalFeedback","totalValue","key","countPositiveFeedbackPercentage","Math","round","this","className","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAWeA,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCaQC,MAhBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,gCACE,2CACA,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDACsBC,EADtB,WCLSC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCcEC,MAdf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBAAQC,QAASH,EAAmCI,KAAK,SAAzD,SACGF,EAAOG,MAD6BH,EAAOG,YCDlDC,E,4MAKJC,MAAQ,CACNhB,KAAM,EAAKiB,MAAMC,aACjBjB,QAAS,EAAKgB,MAAMC,aACpBhB,IAAK,EAAKe,MAAMC,c,EAGlBrB,MAAQ,wB,EAERS,QAAU,oB,EAEVE,QAAU,CAAC,CAAEM,KAAM,QAAU,CAAEA,KAAM,WAAa,CAAEA,KAAM,Q,EAE1DL,gBAAkB,SAACU,GASjB,OAAQA,EAAEC,OAAOC,UAAUC,eACzB,IAAK,OACH,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAAExB,KAAMwB,EAAUxB,KAAO,MACvD,MAEF,IAAK,UACH,EAAKuB,UAAS,SAACC,GAAD,MAAgB,CAAEvB,QAASuB,EAAUvB,QAAU,MAC7D,MAEF,IAAK,MACH,EAAKsB,UAAS,SAACC,GAAD,MAAgB,CAAEtB,IAAKsB,EAAUtB,IAAM,MACrD,MAEF,QACEuB,QAAQC,IAAI,+B,EAIlBC,mBAAqB,WACnB,IAAIC,EAAa,KACjB,IAAK,IAAMC,KAAO,EAAKb,MACrBY,GAAc,EAAKZ,MAAMa,GAE3B,OAAOD,G,EAGTE,gCAAkC,WAShC,OAN8B,IAA9B,EAAKH,qBAC0B,EACAI,KAAKC,MAC7B,EAAKhB,MAAMhB,KAAO,EAAK2B,qBAAwB,M,4CAMxD,WACE,MAA+BM,KAAKjB,MAA5BhB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,qBAAKgC,UAAU,eAAf,SACE,eAAC,EAAD,aAASrC,MAAOoC,KAAKpC,MAAOC,UAAQ,GAApC,YACE,cAAC,EAAD,CACEU,QAASyB,KAAKzB,QACdC,gBAAiBwB,KAAKxB,kBAEvBwB,KAAKN,qBAAuB,EAC3B,cAAC,EAAD,CACE3B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO8B,KAAKN,qBACZvB,mBAAoB6B,KAAKH,oCAG3B,cAAC,EAAD,CAAcxB,QAAS2B,KAAK3B,mB,GAlFtB6B,aAAZpB,EACGqB,aAAe,CACpBlB,aAAc,GAwFHH,QC5FfsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8f16fa5f.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n}\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div>\n      <p>Statistics</p>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>\n        Positive feedback: {positivePercentage}\n        &#37;\n      </p>\n    </div>\n  );\n}\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map((option) => {\n        return (\n          <button onClick={onLeaveFeedback} key={option.name} type=\"button\">\n            {option.name}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notification\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\n\nclass App extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n  };\n\n  title = \"Please leave feedback\";\n\n  message = \"No feedback given\";\n\n  options = [{ name: \"Good\" }, { name: \"Neutral\" }, { name: \"Bad\" }];\n\n  onLeaveFeedback = (e) => {\n    // const keys = Object.keys(this.state);\n    // const index = arr.indexOf(e.target.innerText.toLowerCase());\n    // console.log(index);\n\n    // for (const key of keys) {\n\n    // }\n\n    switch (e.target.innerText.toLowerCase()) {\n      case \"good\":\n        this.setState((prevState) => ({ good: prevState.good + 1 }));\n        break;\n\n      case \"neutral\":\n        this.setState((prevState) => ({ neutral: prevState.neutral + 1 }));\n        break;\n\n      case \"bad\":\n        this.setState((prevState) => ({ bad: prevState.bad + 1 }));\n        break;\n\n      default:\n        console.log(\"Invalid subscription type\");\n    }\n  };\n\n  countTotalFeedback = () => {\n    let totalValue = null;\n    for (const key in this.state) {\n      totalValue += this.state[key];\n    }\n    return totalValue;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let positiveValuePercentage = null;\n\n    this.countTotalFeedback() === 0\n      ? (positiveValuePercentage = 0)\n      : (positiveValuePercentage = Math.round(\n          (this.state.good / this.countTotalFeedback()) * 100\n        ));\n\n    return positiveValuePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"AppContainer\">\n        <Section title={this.title} children>\n          <FeedbackOptions\n            options={this.options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message={this.message} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}